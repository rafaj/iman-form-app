generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                        String              @id @default(cuid())
  name                      String
  email                     String              @unique
  active                    Boolean             @default(true)
  approvalsInWindow         Int                 @default(0)
  lastApprovalAt            DateTime?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  userId                    String?             @unique
  contribution              String?
  employer                  String?
  interest                  String?
  linkedin                  String?
  professionalQualification String?
  availableAsMentor         Boolean             @default(false)
  menteeProfile             String?
  mentorProfile             String?
  seekingMentor             Boolean             @default(false)
  school                    String?
  skills                    String?
  approvedApplications      Application[]       @relation("ApproverApplications")
  sponsoredApplications     Application[]       @relation("SponsorApplications")
  user                      User?               @relation(fields: [userId], references: [id])
  menteeConnections         MentorshipRequest[] @relation("MenteeConnections")
  mentorConnections         MentorshipRequest[] @relation("MentorConnections")

  @@index([email, active])
  @@index([userId])
  @@index([createdAt])
  @@index([active])
  @@map("members")
}

model Application {
  id                        String            @id @default(cuid())
  token                     String            @unique
  applicantName             String
  applicantEmail            String
  sponsorEmail              String
  sponsorMemberId           String
  streetAddress             String
  city                      String
  state                     String
  zip                       String
  professionalQualification String
  interest                  String
  contribution              String
  employer                  String?
  linkedin                  String?
  status                    ApplicationStatus @default(PENDING)
  createdAt                 DateTime          @default(now())
  expiresAt                 DateTime
  approvedAt                DateTime?
  verificationCode          String
  activationToken           String?           @unique
  activatedAt               DateTime?
  approvedById              String?
  availableAsMentor         Boolean           @default(false)
  menteeProfile             String?
  mentorProfile             String?
  seekingMentor             Boolean           @default(false)
  school                    String?
  skills                    String?
  approvedBy                Member?           @relation("ApproverApplications", fields: [approvedById], references: [id])
  sponsor                   Member            @relation("SponsorApplications", fields: [sponsorMemberId], references: [id])
  auditLogs                 AuditLog[]

  @@index([applicantEmail, status])
  @@index([sponsorEmail])
  @@index([status, createdAt])
  @@index([token])
  @@map("applications")
}

model AuditLog {
  id            String      @id @default(cuid())
  applicationId String
  event         String
  performedBy   String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Sponsor {
  id          String         @id @default(cuid())
  name        String
  description String
  website     String?
  logoUrl     String?
  tier        SponsorTier    @default(BRONZE)
  active      Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  hearts      SponsorHeart[]

  @@index([active])
  @@index([tier])
  @@map("sponsors")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(MEMBER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastSeenAt    DateTime?
  accounts      Account[]
  commentVotes  CommentVote[]
  comments      Comment[]
  member        Member?
  postVotes     PostVote[]
  posts         Post[]
  sessions      Session[]
  sponsorHearts SponsorHeart[]

  @@index([email])
  @@index([lastSeenAt])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id           String     @id @default(cuid())
  title        String
  content      String?
  url          String?
  type         PostType   @default(DISCUSSION)
  authorId     String
  pinned       Boolean    @default(false)
  locked       Boolean    @default(false)
  score        Int        @default(0)
  voteCount    Int        @default(0)
  commentCount Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  comments     Comment[]
  votes        PostVote[]
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([score])
  @@index([type, createdAt])
  @@index([authorId])
  @@map("posts")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  score     Int           @default(0)
  voteCount Int           @default(0)
  depth     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  votes     CommentVote[]
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, parentId])
  @@index([score])
  @@index([authorId])
  @@map("comments")
}

model PostVote {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@map("post_votes")
}

model CommentVote {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
  @@map("comment_votes")
}

model MentorshipRequest {
  id              String           @id @default(cuid())
  mentorId        String
  menteeId        String
  status          ConnectionStatus @default(PENDING)
  message         String
  requestType     String
  preferredFormat String?
  mentorResponse  String?
  respondedAt     DateTime?
  contactShared   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  mentee          Member           @relation("MenteeConnections", fields: [menteeId], references: [id], onDelete: Cascade)
  mentor          Member           @relation("MentorConnections", fields: [mentorId], references: [id], onDelete: Cascade)

  @@unique([mentorId, menteeId])
  @@index([mentorId, status])
  @@index([menteeId, status])
  @@index([createdAt])
  @@map("mentorship_requests")
}

model SponsorHeart {
  id        String   @id @default(cuid())
  sponsorId String
  userId    String
  createdAt DateTime @default(now())
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sponsorId, userId])
  @@index([sponsorId])
  @@index([userId])
  @@map("sponsor_hearts")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum SponsorTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum UserRole {
  ADMIN
  MEMBER
}

enum PostType {
  DISCUSSION
  ANNOUNCEMENT
  JOB_POSTING
  EVENT
}

enum VoteType {
  UP
  DOWN
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  ENDED
}
