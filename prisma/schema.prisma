// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                  String        @id @default(cuid())
  name                String
  email               String        @unique
  active              Boolean       @default(true)
  approvalsInWindow   Int           @default(0)
  lastApprovalAt      DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  // Link to User account (OAuth)
  userId              String?       @unique
  user                User?         @relation(fields: [userId], references: [id])
  
  // Professional Information (editable by member)
  professionalQualification String?
  interest                 String?
  contribution             String?
  employer                 String?
  linkedin                 String?
  
  // Mentorship Information
  availableAsMentor        Boolean   @default(false)
  mentorProfile            String?   // What they can mentor in
  seekingMentor            Boolean   @default(false)
  menteeProfile            String?   // What they want to learn
  
  // Relations
  sponsoredApplications Application[] @relation("SponsorApplications")
  approvedApplications  Application[] @relation("ApproverApplications")
  mentorConnections     MentorConnection[] @relation("MentorConnections")
  menteeConnections     MentorConnection[] @relation("MenteeConnections")

  // Performance indexes
  @@index([email, active])
  @@index([userId])
  @@index([createdAt])
  @@index([active])
  @@map("members")
}

model Application {
  id                       String            @id @default(cuid())
  token                    String            @unique
  applicantName            String
  applicantEmail           String
  sponsorEmail             String
  sponsorMemberId          String
  
  // Address fields
  streetAddress            String
  city                     String
  state                    String
  zip                      String
  
  // Application fields
  professionalQualification String
  interest                 String
  contribution             String
  employer                 String?
  linkedin                 String?
  
  // Mentorship fields (optional)
  availableAsMentor        Boolean   @default(false)
  mentorProfile            String?   // What they can mentor in
  seekingMentor            Boolean   @default(false)
  menteeProfile            String?   // What they want to learn
  
  status                   ApplicationStatus @default(PENDING)
  createdAt                DateTime          @default(now())
  expiresAt                DateTime
  approvedAt               DateTime?
  verificationCode         String
  
  // Account activation
  activationToken          String?           @unique
  activatedAt              DateTime?
  
  // Relations
  sponsor                  Member            @relation("SponsorApplications", fields: [sponsorMemberId], references: [id])
  approvedBy               Member?           @relation("ApproverApplications", fields: [approvedById], references: [id])
  approvedById             String?
  
  // Audit trail
  auditLogs                AuditLog[]

  // Performance indexes
  @@index([applicantEmail, status])
  @@index([sponsorEmail])
  @@index([status, createdAt])
  @@index([token])
  @@map("applications")
}

model AuditLog {
  id            String      @id @default(cuid())
  applicationId String
  event         String
  performedBy   String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  
  // Relations
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Sponsor {
  id          String      @id @default(cuid())
  name        String
  description String      // The blurb
  website     String?
  logoUrl     String?     // Path to the uploaded image
  tier        SponsorTier @default(BRONZE)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Performance indexes
  @@index([active])
  @@index([tier])
  @@map("sponsors")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum SponsorTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum UserRole {
  ADMIN
  MEMBER
}

enum PostType {
  DISCUSSION
  ANNOUNCEMENT
  JOB_POSTING
  EVENT
}

enum VoteType {
  UP
  DOWN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credential provider
  role          UserRole  @default(MEMBER)
  lastSeenAt    DateTime? // Track when user was last active
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Link to Member record
  member        Member?

  accounts      Account[]
  sessions      Session[]
  
  // Forum relations
  posts         Post[]
  comments      Comment[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]

  // Performance indexes
  @@index([email])
  @@index([lastSeenAt])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([userId, expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String?   // Optional for link posts
  url         String?   // Optional external link
  type        PostType  @default(DISCUSSION)
  authorId    String
  pinned      Boolean   @default(false)
  locked      Boolean   @default(false)
  score       Int       @default(0)
  voteCount   Int       @default(0)
  commentCount Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       PostVote[]

  // Performance indexes
  @@index([createdAt])
  @@index([score])
  @@index([type, createdAt])
  @@index([authorId])
  @@map("posts")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  postId      String
  authorId    String
  parentId    String?   // For threaded comments
  score       Int       @default(0)
  voteCount   Int       @default(0)
  depth       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]    @relation("CommentReplies")
  votes       CommentVote[]

  // Performance indexes
  @@index([postId, parentId])
  @@index([score])
  @@index([authorId])
  @@map("comments")
}

model PostVote {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  voteType  VoteType
  createdAt DateTime  @default(now())

  // Relations
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@map("post_votes")
}

model CommentVote {
  id        String    @id @default(cuid())
  commentId String
  userId    String
  voteType  VoteType
  createdAt DateTime  @default(now())

  // Relations
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
  @@map("comment_votes")
}

model MentorConnection {
  id          String              @id @default(cuid())
  mentorId    String
  menteeId    String
  status      ConnectionStatus    @default(PENDING)
  message     String?             // Optional message when requesting connection
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  mentor      Member              @relation("MentorConnections", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee      Member              @relation("MenteeConnections", fields: [menteeId], references: [id], onDelete: Cascade)
  
  @@unique([mentorId, menteeId])
  @@map("mentor_connections")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  ENDED
}
